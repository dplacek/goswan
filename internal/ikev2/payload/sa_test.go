package payload

import (
	"testing"

	"github.com/stretchr/testify/require"
)

const testSABytes = "\x22\x00\x03\x08\x02\x00\x01\x64\x01\x01\x00\x27\x03\x00\x00\x0c" +
	"\x01\x00\x00\x0c\x80\x0e\x00\x80\x03\x00\x00\x0c\x01\x00\x00\x0c" +
	"\x80\x0e\x00\xc0\x03\x00\x00\x0c\x01\x00\x00\x0c\x80\x0e\x01\x00" +
	"\x03\x00\x00\x0c\x01\x00\x00\x0d\x80\x0e\x00\x80\x03\x00\x00\x0c" +
	"\x01\x00\x00\x0d\x80\x0e\x00\xc0\x03\x00\x00\x0c\x01\x00\x00\x0d" +
	"\x80\x0e\x01\x00\x03\x00\x00\x0c\x01\x00\x00\x17\x80\x0e\x00\x80" +
	"\x03\x00\x00\x0c\x01\x00\x00\x17\x80\x0e\x00\xc0\x03\x00\x00\x0c" +
	"\x01\x00\x00\x17\x80\x0e\x01\x00\x03\x00\x00\x08\x01\x00\x00\x03" +
	"\x03\x00\x00\x08\x03\x00\x00\x0c\x03\x00\x00\x08\x03\x00\x00\x0d" +
	"\x03\x00\x00\x08\x03\x00\x00\x0e\x03\x00\x00\x08\x03\x00\x00\x05" +
	"\x03\x00\x00\x08\x03\x00\x00\x08\x03\x00\x00\x08\x03\x00\x00\x02" +
	"\x03\x00\x00\x08\x02\x00\x00\x04\x03\x00\x00\x08\x02\x00\x00\x08" +
	"\x03\x00\x00\x08\x02\x00\x00\x05\x03\x00\x00\x08\x02\x00\x00\x06" +
	"\x03\x00\x00\x08\x02\x00\x00\x07\x03\x00\x00\x08\x02\x00\x00\x02" +
	"\x03\x00\x00\x08\x04\x00\x00\x13\x03\x00\x00\x08\x04\x00\x00\x14" +
	"\x03\x00\x00\x08\x04\x00\x00\x15\x03\x00\x00\x08\x04\x00\x00\x1c" +
	"\x03\x00\x00\x08\x04\x00\x00\x1d\x03\x00\x00\x08\x04\x00\x00\x1e" +
	"\x03\x00\x00\x08\x04\x00\x00\x1f\x03\x00\x00\x08\x04\x00\x00\x20" +
	"\x03\x00\x00\x08\x04\x00\x04\x07\x03\x00\x00\x08\x04\x00\x04\x08" +
	"\x03\x00\x00\x08\x04\x00\x04\x09\x03\x00\x00\x08\x04\x00\x04\x10" +
	"\x03\x00\x00\x08\x04\x00\x00\x0f\x03\x00\x00\x08\x04\x00\x00\x10" +
	"\x03\x00\x00\x08\x04\x00\x00\x11\x03\x00\x00\x08\x04\x00\x00\x12" +
	"\x00\x00\x00\x08\x04\x00\x00\x0e\x00\x00\x01\xa0\x02\x01\x00\x2a" +
	"\x03\x00\x00\x0c\x01\x00\x00\x10\x80\x0e\x00\x80\x03\x00\x00\x0c" +
	"\x01\x00\x00\x10\x80\x0e\x00\xc0\x03\x00\x00\x0c\x01\x00\x00\x10" +
	"\x80\x0e\x01\x00\x03\x00\x00\x0c\x01\x00\x00\x14\x80\x0e\x00\x80" +
	"\x03\x00\x00\x0c\x01\x00\x00\x14\x80\x0e\x00\xc0\x03\x00\x00\x0c" +
	"\x01\x00\x00\x14\x80\x0e\x01\x00\x03\x00\x00\x08\x01\x00\x00\x1c" +
	"\x03\x00\x00\x0c\x01\x00\x00\x0e\x80\x0e\x00\x80\x03\x00\x00\x0c" +
	"\x01\x00\x00\x0e\x80\x0e\x00\xc0\x03\x00\x00\x0c\x01\x00\x00\x0e" +
	"\x80\x0e\x01\x00\x03\x00\x00\x0c\x01\x00\x00\x0f\x80\x0e\x00\x80" +
	"\x03\x00\x00\x0c\x01\x00\x00\x0f\x80\x0e\x00\xc0\x03\x00\x00\x0c" +
	"\x01\x00\x00\x0f\x80\x0e\x01\x00\x03\x00\x00\x0c\x01\x00\x00\x12" +
	"\x80\x0e\x00\x80\x03\x00\x00\x0c\x01\x00\x00\x12\x80\x0e\x00\xc0" +
	"\x03\x00\x00\x0c\x01\x00\x00\x12\x80\x0e\x01\x00\x03\x00\x00\x0c" +
	"\x01\x00\x00\x13\x80\x0e\x00\x80\x03\x00\x00\x0c\x01\x00\x00\x13" +
	"\x80\x0e\x00\xc0\x03\x00\x00\x0c\x01\x00\x00\x13\x80\x0e\x01\x00" +
	"\x03\x00\x00\x08\x02\x00\x00\x04\x03\x00\x00\x08\x02\x00\x00\x08" +
	"\x03\x00\x00\x08\x02\x00\x00\x05\x03\x00\x00\x08\x02\x00\x00\x06" +
	"\x03\x00\x00\x08\x02\x00\x00\x07\x03\x00\x00\x08\x02\x00\x00\x02" +
	"\x03\x00\x00\x08\x04\x00\x00\x13\x03\x00\x00\x08\x04\x00\x00\x14" +
	"\x03\x00\x00\x08\x04\x00\x00\x15\x03\x00\x00\x08\x04\x00\x00\x1c" +
	"\x03\x00\x00\x08\x04\x00\x00\x1d\x03\x00\x00\x08\x04\x00\x00\x1e" +
	"\x03\x00\x00\x08\x04\x00\x00\x1f\x03\x00\x00\x08\x04\x00\x00\x20" +
	"\x03\x00\x00\x08\x04\x00\x04\x07\x03\x00\x00\x08\x04\x00\x04\x08" +
	"\x03\x00\x00\x08\x04\x00\x04\x09\x03\x00\x00\x08\x04\x00\x04\x10" +
	"\x03\x00\x00\x08\x04\x00\x00\x0f\x03\x00\x00\x08\x04\x00\x00\x10" +
	"\x03\x00\x00\x08\x04\x00\x00\x11\x03\x00\x00\x08\x04\x00\x00\x12" +
	"\x00\x00\x00\x08\x04\x00\x00\x0e"

func TestSABytes(t *testing.T) {
	proposal1 := Proposal{
		Transforms: []Transform{
			ENCR_AES_CBC_128,
			ENCR_AES_CBC_192,
			ENCR_AES_CBC_256,
			ENCR_AES_CTR_128,
			ENCR_AES_CTR_192,
			ENCR_AES_CTR_256,
			ENCR_CAMELLIA_CBC_128,
			ENCR_CAMELLIA_CBC_192,
			ENCR_CAMELLIA_CBC_256,
			ENCR_3DES,

			INTEG_AUTH_HMAC_SHA2_256_128,
			INTEG_AUTH_HMAC_SHA2_384_192,
			INTEG_AUTH_HMAC_SHA2_512_256,
			INTEG_AUTH_AES_XCBC_96,
			INTEG_AUTH_AES_CMAC_96,
			INTEG_AUTH_HMAC_SHA1_96,

			PRF_AES_128_CBC,
			PRF_AES_128_CMAC6,
			PRF_HMAC_SHA2_256,
			PRF_HMAC_SHA2_384,
			PRF_HMAC_SHA2_512,
			PRF_HMAC_SHA1,

			DH_ECP_RANDOM_256,
			DH_ECP_RANDOM_384,
			DH_ECP_RANDOM_521,
			DH_ECP_BRAINPOOL_256,
			DH_ECP_BRAINPOOL_384,
			DH_ECP_BRAINPOOL_512,
			DH_CURVE25519,
			DH_CURVE448,
			DH_NTRU_128,
			DH_NTRU_192,
			DH_NTRU_256,
			DH_NEWHOPE_128,
			DH_MODP_3072,
			DH_MODP_4096,
			DH_MODP_6144,
			DH_MODP_8192,
			DH_MODP_2048,
		},
	}

	proposal2 := Proposal{
		Transforms: []Transform{
			ENCR_AES_CCM_16_128,
			ENCR_AES_CCM_16_192,
			ENCR_AES_CCM_16_256,
			ENCR_AES_GCM_16_128,
			ENCR_AES_GCM_16_192,
			ENCR_AES_GCM_16_256,
			ENCR_CHACHA20_POLY1305,
			ENCR_AES_CCM_8_128,
			ENCR_AES_CCM_8_192,
			ENCR_AES_CCM_8_256,
			ENCR_AES_CCM_12_128,
			ENCR_AES_CCM_12_192,
			ENCR_AES_CCM_12_256,
			ENCR_AES_GCM_8_128,
			ENCR_AES_GCM_8_192,
			ENCR_AES_GCM_8_256,
			ENCR_AES_GCM_12_128,
			ENCR_AES_GCM_12_192,
			ENCR_AES_GCM_12_256,

			PRF_AES_128_CBC,
			PRF_AES_128_CMAC6,
			PRF_HMAC_SHA2_256,
			PRF_HMAC_SHA2_384,
			PRF_HMAC_SHA2_512,
			PRF_HMAC_SHA1,

			DH_ECP_RANDOM_256,
			DH_ECP_RANDOM_384,
			DH_ECP_RANDOM_521,
			DH_ECP_BRAINPOOL_256,
			DH_ECP_BRAINPOOL_384,
			DH_ECP_BRAINPOOL_512,
			DH_CURVE25519,
			DH_CURVE448,
			DH_NTRU_128,
			DH_NTRU_192,
			DH_NTRU_256,
			DH_NEWHOPE_128,
			DH_MODP_3072,
			DH_MODP_4096,
			DH_MODP_6144,
			DH_MODP_8192,
			DH_MODP_2048,
		},
	}

	sa := &PayloadSA{Proposals: []Proposal{proposal1, proposal2}}

	var buf []byte
	buf = append(buf, byte(PayloadTypeKE), 0, 0, 0)
	buf = sa.AppendTo(buf)
	buf[2] = byte(len(buf) >> 8)
	buf[3] = byte(len(buf))
	require.Equal(t, []byte(testSABytes), buf)
}
